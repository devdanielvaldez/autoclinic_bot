const { Client, LocalAuth, MessageMedia } = require('whatsapp-web.js');
const qrcode = require('qrcode-terminal');
const fs = require('fs');
const path = require('path');
require('dotenv').config();

const firebaseService = require('./firebase');
const ollamaService = require('./ollama-service');

// Cargar conversaciones al iniciar
ollamaService.loadConversations();

// Configuraci√≥n del bot
const BOT_TOGGLE_WORD = process.env.BOT_TOGGLE_WORD || 'botoff';
const inactiveChats = new Set(); // Chats donde el bot est√° INACTIVO
const ADMIN_PHONE = process.env.ADMIN_PHONE || '1234567890@c.us'; // Tu n√∫mero de admin

class WhatsAppBot {
  constructor() {
    this.client = new Client({
      authStrategy: new LocalAuth(),
      puppeteer: {
        headless: true,
        args: ['--no-sandbox', '--disable-setuid-sandbox']
      }
    });

    this.companyInfo = null;
    this.washPackages = [];
    this.initializeBot();
  }

  async initializeBot() {
    // Cargar datos de Firebase
    await this.loadCompanyData();

    // Configurar eventos del cliente
    this.setupEventHandlers();

    // Inicializar cliente
    this.client.initialize();
  }

  async loadCompanyData() {
    try {
      this.companyInfo = await firebaseService.getCompanyInfo();
      this.washPackages = await firebaseService.getWashPackages();
      console.log('‚úÖ Datos de la empresa cargados correctamente');
    } catch (error) {
      console.error('‚ùå Error cargando datos:', error);
    }
  }

  setupEventHandlers() {
    // Generar QR
    this.client.on('qr', (qr) => {
      console.log('üîç Escanea este c√≥digo QR con WhatsApp:');
      qrcode.generate(qr, { small: true });
    });

    // Cliente listo
    this.client.on('ready', () => {
      console.log('‚úÖ Bot de WhatsApp conectado correctamente');
      console.log('ü§ñ Auto Clinic RD Bot est√° listo para recibir mensajes');
      console.log('üì± Todos los usuarios est√°n HABILITADOS por defecto');
      console.log(`üëë Admin: ${ADMIN_PHONE}`);
    });

    // Mensajes entrantes
    this.client.on('message', async (message) => {
      await this.handleMessage(message);
    });

    // Manejar errores
    this.client.on('auth_failure', (msg) => {
      console.error('‚ùå Error de autenticaci√≥n:', msg);
    });

    this.client.on('disconnected', (reason) => {
      console.log('‚ùå Cliente desconectado:', reason);
    });
  }

  async handleMessage(message) {
    // Ignorar mensajes del propio bot
    if (message.fromMe) return;

    const phone = message.from;
    const body = message.body.trim();
    const hasMedia = message.hasMedia;

    // Guardar mensaje del usuario en Firebase
    await firebaseService.saveConversation(phone, body, true);

    // Verificar si es multimedia
    if (hasMedia) {
      console.log('üì± Mensaje multimedia recibido - Ignorando para respuesta humana');
      return;
    }

    // Verificar si es un comando del ADMIN
    if (phone === ADMIN_PHONE) {
      const handled = await this.handleAdminCommand(phone, body, message);
      if (handled) return;
    }

    // Verificar si el bot est√° INACTIVO en este chat
    if (inactiveChats.has(phone)) {
      console.log(`‚ùå Bot INACTIVO para: ${phone} - Ignorando mensaje`);
      return; // No responder si el bot est√° desactivado para este usuario
    }

    // Verificar palabra de toggle desde el USUARIO (para activar/desactivar)
    if (body.toLowerCase() === BOT_TOGGLE_WORD) {
      await this.handleUserToggle(phone, message);
      return;
    }

    // Simular typing
    await this.simulateTyping(phone);

    // Procesar mensaje (todos los usuarios est√°n habilitados por defecto)
    await this.processMessage(phone, body.toLowerCase(), message);
  }

  // Manejar comandos del ADMIN
  async handleAdminCommand(adminPhone, body, message) {
    const parts = body.split(' ');
    const command = parts[0].toLowerCase();

    // Comando para desactivar bot para un usuario espec√≠fico
    if (command === '/disable' && parts.length > 1) {
      const targetPhone = parts[1];
      await this.deactivateBotForUser(targetPhone);
      await message.reply(`‚úÖ Bot desactivado para usuario: ${targetPhone}`);
      return true;
    }

    // Comando para activar bot para un usuario espec√≠fico
    if (command === '/enable' && parts.length > 1) {
      const targetPhone = parts[1];
      await this.activateBotForUser(targetPhone);
      await message.reply(`‚úÖ Bot activado para usuario: ${targetPhone}`);
      return true;
    }

    // Comando para ver estado de un usuario
    if (command === '/status' && parts.length > 1) {
      const targetPhone = parts[1];
      const status = this.isBotEnabledForUser(targetPhone) ? 'ACTIVADO' : 'DESACTIVADO';
      await message.reply(`üìä Estado para ${targetPhone}: ${status}`);
      return true;
    }

    // Comando para lista de usuarios desactivados
    if (command === '/listdisabled') {
      if (inactiveChats.size === 0) {
        await message.reply('üìã No hay usuarios desactivados');
      } else {
        const disabledList = Array.from(inactiveChats).join('\n');
        await message.reply(`üìã Usuarios desactivados (${inactiveChats.size}):\n${disabledList}`);
      }
      return true;
    }

    // Comando de ayuda para admin
    if (command === '/help') {
      const helpMessage = `üëë *Comandos de Administraci√≥n*

*/disable [n√∫mero]* - Desactivar bot para usuario
*/enable [n√∫mero]* - Activar bot para usuario  
*/status [n√∫mero]* - Ver estado de usuario
*/listdisabled* - Listar usuarios desactivados
*/help* - Mostrar esta ayuda

*Ejemplo:* /disable 1234567890@c.us`;
      await message.reply(helpMessage);
      return true;
    }

    return false;
  }

  // Funci√≥n para que el ADMIN desactive el bot para un usuario espec√≠fico
  async deactivateBotForUser(phone) {
    inactiveChats.add(phone);
    console.log(`üîï Bot desactivado por ADMIN para usuario: ${phone}`);
    
    try {
      const chat = await this.client.getChatById(phone);
      await chat.sendMessage('ü§ñ *Bot desactivado*\n\nEl servicio de asistencia autom√°tica ha sido desactivado temporalmente. Para atenci√≥n personalizada, contacta a nuestro equipo al *809-244-0055*.');
    } catch (error) {
      console.error('Error enviando mensaje de desactivaci√≥n:', error);
    }
  }

  // Funci√≥n para que el ADMIN active el bot para un usuario espec√≠fico
  async activateBotForUser(phone) {
    inactiveChats.delete(phone);
    console.log(`üîî Bot activado por ADMIN para usuario: ${phone}`);
    
    try {
      const chat = await this.client.getChatById(phone);
      await chat.sendMessage('ü§ñ *Bot reactivado*\n\n¬°Hola! El servicio de asistencia autom√°tica ha sido reactivado. ¬øEn qu√© puedo ayudarte?');
    } catch (error) {
      console.error('Error enviando mensaje de activaci√≥n:', error);
    }
  }

  // Manejar toggle desde el USUARIO
  async handleUserToggle(phone, message) {
    if (inactiveChats.has(phone)) {
      // Reactivar el bot (si el admin no lo ha desactivado permanentemente)
      inactiveChats.delete(phone);
      await message.reply('ü§ñ *Bot reactivado*\n\n¬°Hola de nuevo! El bot ha sido reactivado. ¬øEn qu√© puedo ayudarte?');
      console.log(`‚úÖ Bot reactivado por usuario: ${phone}`);
    } else {
      // Desactivar el bot
      inactiveChats.add(phone);
      await message.reply('ü§ñ *Bot desactivado*\n\nEl bot ha sido desactivado. Escribe "*botoff*" nuevamente cuando quieras reactivarlo.');
      console.log(`‚ùå Bot desactivado por usuario: ${phone}`);
    }
  }

  async simulateTyping(phone) {
    try {
      const chat = await this.client.getChatById(phone);
      await chat.sendStateTyping();
      
      // Simular tiempo de escritura (1-3 segundos)
      const typingTime = Math.random() * 2000 + 1000;
      await new Promise(resolve => setTimeout(resolve, typingTime));
    } catch (error) {
      console.error('Error simulando typing:', error);
    }
  }

  async processMessage(phone, body, message) {
    try {
      // Men√∫ principal
      if (body === '1' || body.includes('reservacion') || body.includes('reserva') || body.includes('agendar')) {
        await this.handleCreateBooking(message);
      }
      else if (body === '2' || body.includes('estado') || body.includes('consultar') || body.includes('codigo')) {
        await this.handleCheckBooking(message);
      }
      else if (body === '3' || body.includes('servicio') || body.includes('paquete') || body.includes('precio')) {
        await this.handleServices(message);
      }
      else if (body === '4' || body.includes('representante') || body.includes('humano') || body.includes('ia')) {
        await this.handleRepresentative(message);
      }
      else if (body === '5' || body.includes('ubicacion') || body.includes('contacto') || body.includes('direccion') || body.includes('horario')) {
        await this.handleLocation(message);
      }
      else if (body === 'menu' || body === 'help' || body === 'ayuda' || body === '0') {
        await this.sendMainMenu(message);
      }
      else {
        // Conversaci√≥n con IA
        await this.handleAIConversation(phone, body, message);
      }
    } catch (error) {
      console.error('Error procesando mensaje:', error);
      await message.reply('‚ùå Ocurri√≥ un error al procesar tu mensaje. Por favor, intenta nuevamente.');
    }
  }

  async sendWelcomeMessage(message) {
    const welcomeMessage = `üöó *Bienvenido a Auto Clinic RD* ü§ñ

¬°Hola! Soy tu asistente virtual de Auto Clinic RD. Estoy aqu√≠ para ayudarte con:

*1. Crear Reservaci√≥n* - Agenda tu servicio de detailing
*2. Consultar estado de mi reservaci√≥n* - Revisa el estado de tu cita
*3. Consultar Servicios* - Conoce nuestros paquetes y precios
*4. Conversar con un representante* - Chatea con nuestra IA
*5. Ubicaci√≥n y Contactos* - Encu√©ntranos f√°cilmente

*Escribe el n√∫mero de la opci√≥n que deseas o tu pregunta directamente.*

üìç *Auto Clinic RD - Tu veh√≠culo como nuevo*`;

    await message.reply(welcomeMessage);
  }

  async sendMainMenu(message) {
    const menuMessage = `üìã *Men√∫ Principal - Auto Clinic RD*

Selecciona una opci√≥n:

*1. Crear Reservaci√≥n* - Agenda tu servicio
*2. Consultar estado de mi reservaci√≥n* - Revisa tu cita
*3. Consultar Servicios* - Conoce paquetes y precios
*4. Conversar con un representante* - Asistencia inteligente
*5. Ubicaci√≥n y Contactos* - Direcci√≥n y horarios

*Escribe el n√∫mero de la opci√≥n que deseas:*`;

    await message.reply(menuMessage);
  }

  async handleCreateBooking(message) {
    const bookingMessage = `üìÖ *Crear Reservaci√≥n - Auto Clinic RD*

Para crear tu reservaci√≥n, por favor accede a nuestro portal web donde podr√°s:

‚Ä¢ Ver todos nuestros paquetes disponibles
‚Ä¢ Seleccionar fecha y hora preferida
‚Ä¢ Especificar informaci√≥n de tu veh√≠culo
‚Ä¢ Recibir confirmaci√≥n inmediata

üåê *Accede aqu√≠:* https://portal-web-auto-clin-ma0o.bolt.host/packages

Una vez en la p√°gina, haz clic en "Agendar Cita" en el paquete que prefieras.

¬øNecesitas ayuda con alg√∫n paquete espec√≠fico? Escribe *3* para ver nuestros servicios.`;

    await message.reply(bookingMessage);
  }

  async handleCheckBooking(message) {
    // Primero pedir el c√≥digo
    const askCodeMessage = `üîç *Consultar Estado de Reservaci√≥n*

Por favor, escribe tu *c√≥digo de confirmaci√≥n* (ejemplo: AC40686909Z3HM) para consultar el estado de tu reservaci√≥n.

Este c√≥digo lo recibiste al completar tu reserva en nuestro portal web.`;

    await message.reply(askCodeMessage);
  }

  async handleServices(message) {
    if (!this.washPackages.length) {
      await message.reply('‚ùå No pude cargar la informaci√≥n de servicios en este momento. Por favor, intenta m√°s tarde.');
      return;
    }

    let servicesMessage = `üöø *Nuestros Servicios - Auto Clinic RD*\n\n`;

    this.washPackages.forEach((pkg, index) => {
      servicesMessage += `*${pkg.name}* ${pkg.popular ? 'üèÜ' : ''}\n`;
      servicesMessage += `üìù ${pkg.description}\n`;
      servicesMessage += `üíµ *Precios:*\n`;
      servicesMessage += `   ‚Ä¢ Peque√±o: $${pkg.prices.small}\n`;
      servicesMessage += `   ‚Ä¢ Mediano: $${pkg.prices.medium}\n`;
      servicesMessage += `   ‚Ä¢ Grande: $${pkg.prices.large}\n`;
      
      if (pkg.services && pkg.services.length) {
        servicesMessage += `üîß *Incluye:* ${pkg.services.slice(0, 3).join(', ')}`;
        if (pkg.services.length > 3) servicesMessage += `...`;
        servicesMessage += `\n`;
      }
      
      servicesMessage += `\n`;
    });

    servicesMessage += `üí° *Para reservar:* Escribe *1* o visita:\n`;
    servicesMessage += `https://portal-web-auto-clin-ma0o.bolt.host/packages`;

    await message.reply(servicesMessage);
  }

  async handleRepresentative(message) {
    const repMessage = `üí¨ *Conversar con Representante*

¬°Perfecto! Ahora puedes conversar conmigo libremente. Soy un asistente IA con informaci√≥n actualizada de Auto Clinic RD.

Puedes preguntarme sobre:
‚Ä¢ Servicios y precios
‚Ä¢ Horarios de atenci√≥n
‚Ä¢ Estado de reservaciones (necesitar√© tu c√≥digo)
‚Ä¢ Informaci√≥n general
‚Ä¢ Y mucho m√°s...

*Escribe tu pregunta directamente* y te ayudar√© de inmediato.

*Para volver al men√∫ principal escribe:* menu`;

    await message.reply(repMessage);
  }

  async handleLocation(message) {
    if (!this.companyInfo) {
      await message.reply('‚ùå No pude cargar la informaci√≥n de contacto en este momento.');
      return;
    }

    const locationMessage = `üìç *Ubicaci√≥n y Contactos - Auto Clinic RD*

*üè¢ Direcci√≥n:*
${this.companyInfo.location.address}
${this.companyInfo.location.city}

*üïí Horarios de Atenci√≥n:*
Lunes a Viernes: ${this.companyInfo.hours.monday}
S√°bado: ${this.companyInfo.hours.saturday}
Domingo: ${this.companyInfo.hours.sunday}

*üìû Contactos:*
Tel√©fono: ${this.companyInfo.contact.phone}
WhatsApp: ${this.companyInfo.contact.whatsapp}
Email: ${this.companyInfo.contact.email}
Instagram: ${this.companyInfo.contact.instagram}

*üó∫Ô∏è Ubicaci√≥n en Google Maps:*
https://maps.app.goo.gl/gVPfDAz1Xr79k1Xi9

*üöó ¬°Te esperamos!*`;

    await message.reply(locationMessage);
  }

  // Funci√≥n para normalizar c√≥digos de confirmaci√≥n
  normalizeConfirmationCode(text) {
    const upperText = text.toUpperCase().trim();
    
    // Si ya tiene formato AC, devolverlo tal cual
    if (upperText.startsWith('AC')) {
      return upperText;
    }
    
    // Si es solo la parte num√©rica, agregar el prefijo AC
    if (/^\d{8}[A-Z]{4}$/.test(upperText)) {
      return 'AC' + upperText;
    }
    
    return upperText;
  }

  async handleAIConversation(phone, userMessage, message) {
    try {
      // Primero verificar si es un c√≥digo de confirmaci√≥n o si debemos procesar uno
      if (userMessage.startsWith('PROCESAR_CODIGO:')) {
        const confirmationCode = userMessage.replace('PROCESAR_CODIGO:', '');
        const booking = await firebaseService.getBookingByConfirmationNumber(confirmationCode);
        if (booking) {
          ollamaService.setAwaitingConfirmationCode(phone, false);
          await this.sendBookingStatus(message, booking);
          return;
        } else {
          ollamaService.setAwaitingConfirmationCode(phone, true);
          await message.reply('‚ùå No encontr√© una reservaci√≥n con el c√≥digo *' + confirmationCode + '*.\n\nPor favor, verifica el c√≥digo e intenta nuevamente.\n\n*Formato correcto:* AC40686909Z3HM');
          return;
        }
      }

      // Verificar si es un c√≥digo de confirmaci√≥n directo
      if (this.looksLikeConfirmationCode(userMessage)) {
        const normalizedCode = firebaseService.normalizeConfirmationCode(userMessage);
        const booking = await firebaseService.getBookingByConfirmationNumber(normalizedCode);
        if (booking) {
          ollamaService.setAwaitingConfirmationCode(phone, false);
          await this.sendBookingStatus(message, booking);
          return;
        } else {
          ollamaService.setAwaitingConfirmationCode(phone, true);
          await message.reply('‚ùå No encontr√© una reservaci√≥n con el c√≥digo *' + normalizedCode + '*.\n\nPor favor, verifica el c√≥digo e intenta nuevamente.');
          return;
        }
      }

      // Verificar si estamos esperando un c√≥digo de confirmaci√≥n
      if (ollamaService.isAwaitingConfirmationCode(phone)) {
        if (this.looksLikeConfirmationCode(userMessage)) {
          const normalizedCode = firebaseService.normalizeConfirmationCode(userMessage);
          const booking = await firebaseService.getBookingByConfirmationNumber(normalizedCode);
          if (booking) {
            ollamaService.setAwaitingConfirmationCode(phone, false);
            await this.sendBookingStatus(message, booking);
            return;
          } else {
            ollamaService.setAwaitingConfirmationCode(phone, true);
            await message.reply('‚ùå No encontr√© una reservaci√≥n con el c√≥digo *' + normalizedCode + '*.\n\nPor favor, verifica el c√≥digo e intenta nuevamente.\n\n*Formato correcto:* AC40686909Z3HM');
            return;
          }
        }
      }

      // Usar Ollama para generar respuesta
      const response = await ollamaService.generateResponse(
        phone, 
        userMessage, 
        this.companyInfo, 
        this.washPackages
      );

      // Si la respuesta indica que debemos procesar un c√≥digo
      if (response.startsWith('PROCESAR_CODIGO:')) {
        const confirmationCode = response.replace('PROCESAR_CODIGO:', '');
        const booking = await firebaseService.getBookingByConfirmationNumber(confirmationCode);
        if (booking) {
          ollamaService.setAwaitingConfirmationCode(phone, false);
          await this.sendBookingStatus(message, booking);
          return;
        } else {
          ollamaService.setAwaitingConfirmationCode(phone, true);
          await message.reply('‚ùå No encontr√© una reservaci√≥n con el c√≥digo *' + confirmationCode + '*.\n\nPor favor, verifica el c√≥digo e intenta nuevamente.');
          return;
        }
      }

      // Simular typing antes de enviar
      await this.simulateTyping(phone);
      
      await message.reply(response);

      // Guardar respuesta del bot en Firebase
      await firebaseService.saveConversation(phone, response, false);

    } catch (error) {
      console.error('Error en conversaci√≥n con IA:', error);
      const phoneNumber = this.companyInfo?.contact?.phone || "809-244-0055";
      await message.reply(`‚ùå Estoy teniendo dificultades t√©cnicas. Por favor, intenta nuevamente o contacta al *${phoneNumber}*`);
    }
  }

  // Actualizar la funci√≥n looksLikeConfirmationCode
  looksLikeConfirmationCode(text) {
    // Patr√≥n para c√≥digos como AC40686909Z3HM (AC + 12 caracteres alfanum√©ricos)
    const confirmationPattern = /^AC[A-Z0-9]{12}$/i;
    // Tambi√©n aceptar sin el AC (12 caracteres alfanum√©ricos)
    const shortPattern = /^[A-Z0-9]{12}$/i;
    
    return confirmationPattern.test(text.toUpperCase()) || 
           shortPattern.test(text.toUpperCase());
  }

  async sendBookingStatus(message, booking) {
    const statusEmojis = {
      'pending': '‚è≥',
      'confirmed': '‚úÖ',
      'in-progress': 'üîß',
      'completed': 'üéâ'
    };

    const statusTexts = {
      'pending': 'Pendiente de confirmaci√≥n',
      'confirmed': 'Confirmada',
      'in-progress': 'En progreso',
      'completed': 'Completada'
    };

    const statusMessage = `üìã *Estado de tu Reservaci√≥n*

*C√≥digo:* ${booking.confirmationNumber}
*Cliente:* ${booking.customerName}
*Paquete:* ${booking.packageName}
*Veh√≠culo:* ${booking.vehicleInfo}
*Tama√±o:* ${this.getVehicleSizeText(booking.vehicleSize)}
*Fecha preferida:* ${this.formatDate(booking.preferredDate)}
*Hora:* ${booking.preferredTime}

*Estado:* ${statusEmojis[booking.status]} ${statusTexts[booking.status]}
*Total:* $${booking.total}

${booking.notes ? `*Notas:* ${booking.notes}\n` : ''}
¬øNecesitas ayuda adicional? Escribe *4* para conversar con un representante.`;

    await message.reply(statusMessage);
  }

  getVehicleSizeText(size) {
    const sizes = {
      'small': 'Peque√±o',
      'medium': 'Mediano',
      'large': 'Grande'
    };
    return sizes[size] || size;
  }

  formatDate(date) {
    if (date && date.toDate) {
      return date.toDate().toLocaleDateString('es-DO');
    }
    if (date) {
      return new Date(date).toLocaleDateString('es-DO');
    }
    return 'Fecha no especificada';
  }

  // Verificar si el bot est√° activo para un usuario
  isBotEnabledForUser(phoneNumber) {
    return !inactiveChats.has(phoneNumber);
  }
}

// Inicializar el bot
const bot = new WhatsAppBot();

// Manejar cierre graceful
process.on('SIGINT', async () => {
  console.log('\nüõë Cerrando bot...');
  ollamaService.saveConversations();
  process.exit(0);
});

module.exports = WhatsAppBot;